import string
import secrets

def generate_password(length=12, use_uppercase=True, use_lowercase=True, use_digits=True, use_special_chars=True):
    """Generate a strong, secure password."""
    characters = ''
    if use_uppercase:
        characters += string.ascii_uppercase
    if use_lowercase:
        characters += string.ascii_lowercase
    if use_digits:
        characters += string.digits
    if use_special_chars:
        characters += string.punctuation

    if not characters:
        raise ValueError("At least one character set should be selected.")

    password = ''.join(secrets.choice(characters) for _ in range(length))
    return password

def generate_multiple_passwords(num_passwords=5, length=12, **kwargs):
    """Generate multiple strong, secure passwords."""
    passwords = [generate_password(length, **kwargs) for _ in range(num_passwords)]
    return passwords

def save_passwords_to_file(passwords, filename='passwords.txt'):
    """Save passwords to a text file."""
    with open(filename, 'w') as f:
        for password in passwords:
            f.write(password + '\n')

def main():
    print("Welcome to Password Generator!")

    while True:
        try:
            length = int(input("Enter the length of the password(s): "))
            if length <= 0:
                print("Length should be a positive integer.")
                continue
            break
        except ValueError:
            print("Invalid input. Please enter a valid integer.")

    use_uppercase = input("Include uppercase letters? (y/n): ").lower() == 'y'
    use_lowercase = input("Include lowercase letters? (y/n): ").lower() == 'y'
    use_digits = input("Include digits? (y/n): ").lower() == 'y'
    use_special_chars = input("Include special characters? (y/n): ").lower() == 'y'

    while True:
        try:
            num_passwords = int(input("Enter the number of passwords to generate: "))
            if num_passwords <= 0:
                print("Number of passwords should be a positive integer.")
                continue
            break
        except ValueError:
            print("Invalid input. Please enter a valid integer.")

    try:
        passwords = generate_multiple_passwords(num_passwords, length, 
                                                 use_uppercase=use_uppercase,
                                                 use_lowercase=use_lowercase,
                                                 use_digits=use_digits,
                                                 use_special_chars=use_special_chars)
        print("\nGenerated Passwords:")
        for idx, password in enumerate(passwords, start=1):
            print(f"Password {idx}: {password}")

        save_to_file = input("Do you want to save the passwords to a file? (y/n): ").lower() == 'y'
        if save_to_file:
            filename = input("Enter the filename to save passwords (press Enter to use default 'passwords.txt'): ").strip()
            if not filename:
                filename = 'passwords.txt'
            save_passwords_to_file(passwords, filename)
            print(f"Passwords saved to {filename}")

    except ValueError as ve:
        print(f"Error: {ve}")

if __name__ == "__main__":
    main()
